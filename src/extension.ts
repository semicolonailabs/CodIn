import * as vscode from 'vscode';import * as path from 'path';import * as fs from 'fs';// Constantsconst API_KEY_SECRET_KEY = 'codin.openai.apikey';// Supported languages with their display names and promptsconst SUPPORTED_LANGUAGES = {    'English': 'English',    'Bengali': 'Bengali (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)',    'Melayu': 'Malay (Bahasa Melayu)',    'Arabic': 'Arabic (ÿßŸÑÿπÿ±ÿ®Ÿäÿ©)',    'Spanish': 'Spanish (Espa√±ol)',    'French': 'French (Fran√ßais)',    'German': 'German (Deutsch)',    'Hindi': 'Hindi (‡§π‡§ø‡§Ç‡§¶‡•Ä)',    'Chinese (Simplified)': 'Chinese Simplified (ÁÆÄ‰Ωì‰∏≠Êñá)',    'Japanese': 'Japanese (Êó•Êú¨Ë™û)',    'Korean': 'Korean (ÌïúÍµ≠Ïñ¥)',    'Portuguese': 'Portuguese (Portugu√™s)',    'Russian': 'Russian (–†—É—Å—Å–∫–∏–π)',    'Italian': 'Italian (Italiano)',    'Dutch': 'Dutch (Nederlands)'};// Load environment variablesfunction loadEnvFile(workspaceFolder: string): { [key: string]: string } {    const envPath = path.join(workspaceFolder, '.env');    const env: { [key: string]: string } = {};        try {        if (fs.existsSync(envPath)) {            const envContent = fs.readFileSync(envPath, 'utf8');            const lines = envContent.split('\n');                        for (const line of lines) {                const trimmedLine = line.trim();                if (trimmedLine && !trimmedLine.startsWith('#')) {                    const [key, ...valueParts] = trimmedLine.split('=');                    if (key && valueParts.length > 0) {                        env[key.trim()] = valueParts.join('=').trim();                    }                }            }        }    } catch (error) {        console.error('Error reading .env file:', error);    }        return env;}// CodeAction Provider for floating "Explain Code" buttonclass CodInCodeActionProvider implements vscode.CodeActionProvider {    provideCodeActions(        _document: vscode.TextDocument,        _range: vscode.Range | vscode.Selection,        _context: vscode.CodeActionContext,        _token: vscode.CancellationToken    ): vscode.CodeAction[] | undefined {                // Only show action if there's a selection        const editor = vscode.window.activeTextEditor;        if (!editor || editor.selection.isEmpty) {            return undefined;        }        // Get current language preference        const config = vscode.workspace.getConfiguration('codin');        const currentLanguage = config.get<string>('explanationLanguage', 'English');                // Create the "Explain Code" action with language info        const explainAction = new vscode.CodeAction(`üí° Explain Code (${currentLanguage})`, vscode.CodeActionKind.QuickFix);        explainAction.command = {            title: 'Explain Code',            command: 'extension.explainCode'        };        // Create "Select Language" action        const selectLanguageAction = new vscode.CodeAction('üåç Select Explanation Language', vscode.CodeActionKind.QuickFix);        selectLanguageAction.command = {            title: 'Select Language',            command: 'extension.selectLanguage'        };        // Make explain action preferred so it appears first        explainAction.isPreferred = true;        return [explainAction, selectLanguageAction];    }}// CodeLens Provider for inline "Explain Code" buttonclass CodInCodeLensProvider implements vscode.CodeLensProvider {    private _onDidChangeCodeLenses: vscode.EventEmitter<void> = new vscode.EventEmitter<void>();    public readonly onDidChangeCodeLenses: vscode.Event<void> = this._onDidChangeCodeLenses.event;    provideCodeLenses(document: vscode.TextDocument, _token: vscode.CancellationToken): vscode.CodeLens[] | Thenable<vscode.CodeLens[]> {        const editor = vscode.window.activeTextEditor;        if (!editor || editor.document !== document || editor.selection.isEmpty) {            return [];        }        // Create a CodeLens at the start of the selection        const selectionStart = editor.selection.start;        const range = new vscode.Range(selectionStart, selectionStart);                // Get current language preference        const config = vscode.workspace.getConfiguration('codin');        const currentLanguage = config.get<string>('explanationLanguage', 'English');                const codeLens = new vscode.CodeLens(range);        codeLens.command = {            title: `ü§ñ Explain Code (${currentLanguage})`,            command: 'extension.explainCode'        };        return [codeLens];    }    refresh(): void {        this._onDidChangeCodeLenses.fire();    }}// Helper function to get API key from secure storageasync function getApiKey(context: vscode.ExtensionContext): Promise<string | undefined> {    const apiKey = await context.secrets.get(API_KEY_SECRET_KEY);    return apiKey;}// Helper function to set API key in secure storageasync function setApiKey(context: vscode.ExtensionContext, apiKey: string): Promise<void> {    await context.secrets.store(API_KEY_SECRET_KEY, apiKey);}// Helper function to remove API key from secure storageasync function removeApiKey(context: vscode.ExtensionContext): Promise<void> {    await context.secrets.delete(API_KEY_SECRET_KEY);}// Helper function to validate API key formatfunction validateApiKey(apiKey: string): boolean {    return !!(apiKey && apiKey.trim().length > 0 && apiKey.startsWith('sk-'));}export function activate(context: vscode.ExtensionContext) {    console.log('üöÄ CodIn extension is being activated...');        // Create CodeLens provider instance    const codeLensProvider = new CodInCodeLensProvider();    // Register the CodeAction provider for all file types    const codeActionProvider = vscode.languages.registerCodeActionsProvider(        { scheme: 'file' }, // Works for all file types        new CodInCodeActionProvider(),        {            providedCodeActionKinds: [vscode.CodeActionKind.QuickFix, vscode.CodeActionKind.Empty]        }    );    // Register CodeLens provider for all file types    const codeLensProviderDisposable = vscode.languages.registerCodeLensProvider(        { scheme: 'file' },        codeLensProvider    );    // Listen for selection changes to refresh CodeLens    const selectionChangeListener = vscode.window.onDidChangeTextEditorSelection(() => {        codeLensProvider.refresh();    });    // Register the main explain code command    const explainCodeDisposable = vscode.commands.registerCommand('extension.explainCode', async () => {        console.log('üìù CodIn: explainCode command triggered');                // Get API key from secure storage        let apiKey = await getApiKey(context);        // Fallback: Try to get from .env file if not in secure storage (backward compatibility)        if (!apiKey) {            const workspaceFolder = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;            if (workspaceFolder) {                const env = loadEnvFile(workspaceFolder);                apiKey = env.OPENAI_API_KEY;                                // If found in .env, offer to migrate to secure storage                if (apiKey && validateApiKey(apiKey)) {                    const migrate = await vscode.window.showInformationMessage(                        'Found API key in .env file. Would you like to migrate to secure storage?',                        'Yes, Migrate',                        'Keep .env',                        'Not Now'                    );                                        if (migrate === 'Yes, Migrate') {                        await setApiKey(context, apiKey);                        vscode.window.showInformationMessage('‚úÖ API key migrated to secure storage!');                    }                }            }        }        if (!apiKey) {            const action = await vscode.window.showErrorMessage(                'OpenAI API key not found. Please set your API key to use CodIn.',                'Set API Key',                'Learn More'            );            if (action === 'Set API Key') {                await vscode.commands.executeCommand('extension.setApiKey');            } else if (action === 'Learn More') {                vscode.env.openExternal(vscode.Uri.parse('https://platform.openai.com/api-keys'));            }            return;        }        if (!validateApiKey(apiKey)) {            const action = await vscode.window.showErrorMessage(                'Invalid API key format. OpenAI API keys must start with "sk-".',                'Set New Key',                'Check Key Status'            );                        if (action === 'Set New Key') {                await vscode.commands.executeCommand('extension.setApiKey');            } else if (action === 'Check Key Status') {                await vscode.commands.executeCommand('extension.checkApiKey');            }            return;        }        const editor = vscode.window.activeTextEditor;        if (!editor) {            vscode.window.showInformationMessage('No active editor found.');            return;        }        const selection = editor.selection;        const code = editor.document.getText(selection);        if (!code || code.trim() === '') {            vscode.window.showInformationMessage('No code selected. Please select some code to explain.');            return;        }        console.log('üîç CodIn: Code selected, generating explanation...');        // Show progress indicator        await vscode.window.withProgress({            location: vscode.ProgressLocation.Notification,            title: "Explaining code...",            cancellable: false        }, async (progress) => {            progress.report({ increment: 0, message: "Generating explanation..." });            const panel = vscode.window.createWebviewPanel(                'codeExplanation',                'Code Explanation',                vscode.ViewColumn.Beside,                {                    enableScripts: true,                    retainContextWhenHidden: true                }            );            panel.webview.html = getLoadingWebviewContent();            try {                progress.report({ increment: 50, message: "Getting AI response..." });                                // Get current language preference                const config = vscode.workspace.getConfiguration('codin');                const selectedLanguage = config.get<string>('explanationLanguage', 'English');                                const explanation = await getExplanation(code, apiKey!, selectedLanguage);                progress.report({ increment: 100, message: "Complete!" });                panel.webview.html = getWebviewContent(explanation, code, selectedLanguage);                                console.log('‚úÖ CodIn: Explanation generated successfully');            } catch (error: any) {                console.error('‚ùå CodIn: Error explaining code:', error);                vscode.window.showErrorMessage(`Error getting explanation: ${error.message}`);                panel.webview.html = getErrorWebviewContent(error.message);            }        });    });    // Register additional command variants that all redirect to main command    const explainFunctionDisposable = vscode.commands.registerCommand('extension.explainFunction', () => {        console.log('üîÑ CodIn: explainFunction -> explainCode');        vscode.commands.executeCommand('extension.explainCode');    });    const explainClassDisposable = vscode.commands.registerCommand('extension.explainClass', () => {        console.log('üîÑ CodIn: explainClass -> explainCode');        vscode.commands.executeCommand('extension.explainCode');    });    const explainAlgorithmDisposable = vscode.commands.registerCommand('extension.explainAlgorithm', () => {        console.log('üîÑ CodIn: explainAlgorithm -> explainCode');        vscode.commands.executeCommand('extension.explainCode');    });    const setupApiKeyDisposable = vscode.commands.registerCommand('extension.setupApiKey', () => {        console.log('üîÑ CodIn: setupApiKey -> setApiKey');        vscode.commands.executeCommand('extension.setApiKey');    });    // Register API key setup command    const setApiKeyDisposable = vscode.commands.registerCommand('extension.setApiKey', async () => {        console.log('üîë CodIn: setApiKey command triggered');                const apiKey = await vscode.window.showInputBox({            prompt: 'Enter your OpenAI API Key',            placeHolder: 'sk-...',            password: true, // Masks the input for security            ignoreFocusOut: true,            validateInput: (value: string) => {                if (!value || value.trim().length === 0) {                    return 'API key cannot be empty';                }                if (!value.startsWith('sk-')) {                    return 'OpenAI API keys must start with "sk-"';                }                if (value.length < 20) {                    return 'API key appears to be too short';                }                return undefined; // Valid            }        });        if (apiKey) {            try {                await setApiKey(context, apiKey.trim());                vscode.window.showInformationMessage(                    '‚úÖ OpenAI API Key saved successfully!',                    'Test with Code'                ).then((action) => {                    if (action === 'Test with Code') {                        vscode.commands.executeCommand('extension.explainCode');                    }                });                console.log('‚úÖ CodIn: API key saved successfully');            } catch (error) {                console.error('‚ùå CodIn: Failed to save API key:', error);                vscode.window.showErrorMessage(`‚ùå Failed to save API key: ${error}`);            }        }    });    // Register API key removal command    const removeApiKeyDisposable = vscode.commands.registerCommand('extension.removeApiKey', async () => {        console.log('üóëÔ∏è CodIn: removeApiKey command triggered');                const currentKey = await getApiKey(context);                if (!currentKey) {            vscode.window.showInformationMessage('‚ÑπÔ∏è No API key is currently stored.');            return;        }        const confirm = await vscode.window.showWarningMessage(            'Are you sure you want to remove the stored OpenAI API key?',            { modal: true },            'Remove Key'        );        if (confirm === 'Remove Key') {            try {                await removeApiKey(context);                vscode.window.showInformationMessage('‚úÖ OpenAI API Key removed successfully!');                console.log('‚úÖ CodIn: API key removed successfully');            } catch (error) {                console.error('‚ùå CodIn: Failed to remove API key:', error);                vscode.window.showErrorMessage(`‚ùå Failed to remove API key: ${error}`);            }        }    });    // Register API key check command    const checkApiKeyDisposable = vscode.commands.registerCommand('extension.checkApiKey', async () => {        console.log('üîç CodIn: checkApiKey command triggered');                const apiKey = await getApiKey(context);                if (apiKey) {            const maskedKey = apiKey.substring(0, 7) + '...' + apiKey.substring(apiKey.length - 4);            vscode.window.showInformationMessage(                `‚úÖ API Key Status: Connected\nüîë Key: ${maskedKey}`,                'Test Connection',                'Remove Key'            ).then((action) => {                if (action === 'Test Connection') {                    vscode.commands.executeCommand('extension.explainCode');                } else if (action === 'Remove Key') {                    vscode.commands.executeCommand('extension.removeApiKey');                }            });        } else {            vscode.window.showWarningMessage(                '‚ö†Ô∏è No API Key Found\nPlease set your OpenAI API key to use CodIn.',                'Set API Key',                'Learn More'            ).then((action) => {                if (action === 'Set API Key') {                    vscode.commands.executeCommand('extension.setApiKey');                } else if (action === 'Learn More') {                    vscode.env.openExternal(vscode.Uri.parse('https://platform.openai.com/api-keys'));                }            });        }    });    // Register language selection command    const selectLanguageDisposable = vscode.commands.registerCommand('extension.selectLanguage', async () => {        console.log('üåç CodIn: selectLanguage command triggered');                const languageOptions = Object.entries(SUPPORTED_LANGUAGES).map(([key, display]) => ({            label: display,            description: key === vscode.workspace.getConfiguration('codin').get('explanationLanguage') ? '(Current)' : '',            value: key        }));        const selected = await vscode.window.showQuickPick(languageOptions, {            placeHolder: 'Select your preferred language for code explanations',            matchOnDescription: true,            matchOnDetail: true        });        if (selected) {            const config = vscode.workspace.getConfiguration('codin');            await config.update('explanationLanguage', selected.value, vscode.ConfigurationTarget.Global);                        // Refresh CodeLens to show new language            codeLensProvider.refresh();                        vscode.window.showInformationMessage(                `Code explanations will now be generated in ${selected.label}`,                'Test with Code'            ).then((action) => {                if (action === 'Test with Code') {                    vscode.commands.executeCommand('extension.explainCode');                }            });                        console.log(`‚úÖ CodIn: Language changed to ${selected.label}`);        }    });    // Add all disposables to subscriptions    context.subscriptions.push(explainCodeDisposable);    context.subscriptions.push(explainFunctionDisposable);    context.subscriptions.push(explainClassDisposable);    context.subscriptions.push(explainAlgorithmDisposable);    context.subscriptions.push(setupApiKeyDisposable);    context.subscriptions.push(setApiKeyDisposable);    context.subscriptions.push(removeApiKeyDisposable);    context.subscriptions.push(checkApiKeyDisposable);    context.subscriptions.push(selectLanguageDisposable);    context.subscriptions.push(codeActionProvider);    context.subscriptions.push(codeLensProviderDisposable);    context.subscriptions.push(selectionChangeListener);        console.log('‚úÖ CodIn extension activated successfully! Commands registered:');    console.log('- extension.explainCode ‚úÖ');    console.log('- extension.explainFunction ‚úÖ');    console.log('- extension.explainClass ‚úÖ');     console.log('- extension.explainAlgorithm ‚úÖ');    console.log('- extension.setupApiKey ‚úÖ');    console.log('- extension.setApiKey ‚úÖ');    console.log('- extension.removeApiKey ‚úÖ');    console.log('- extension.checkApiKey ‚úÖ');    console.log('- extension.selectLanguage ‚úÖ');}// Helper function to get language-specific instructions for AIfunction getLanguageInstructions(language: string): string {    const instructions: { [key: string]: string } = {        'English': 'You are a helpful coding assistant that explains code clearly and concisely in English.',        'Bengali': '‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶ï‡ßã‡¶°‡¶ø‡¶Ç ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï ‡¶Ø‡¶ø‡¶®‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡ßã‡¶° ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶ï‡¶∞‡ßá‡¶®‡•§',        'Melayu': 'Anda adalah pembantu pengekodan yang membantu menjelaskan kod dengan jelas dan ringkas dalam Bahasa Melayu.',        'Arabic': 'ÿ£ŸÜÿ™ ŸÖÿ≥ÿßÿπÿØ ÿ®ÿ±ŸÖÿ¨ÿ© ŸÖŸÅŸäÿØ Ÿäÿ¥ÿ±ÿ≠ ÿßŸÑŸÉŸàÿØ ÿ®Ÿàÿ∂Ÿàÿ≠ Ÿàÿ•Ÿäÿ¨ÿßÿ≤ ÿ®ÿßŸÑŸÑÿ∫ÿ© ÿßŸÑÿπÿ±ÿ®Ÿäÿ©.',        'Spanish': 'Eres un asistente de programaci√≥n √∫til que explica el c√≥digo de manera clara y concisa en espa√±ol.',        'French': 'Vous √™tes un assistant de codage utile qui explique le code clairement et de mani√®re concise en fran√ßais.',        'German': 'Du bist ein hilfreicher Coding-Assistent, der Code klar und pr√§gnant auf Deutsch erkl√§rt.',        'Hindi': '‡§Ü‡§™ ‡§è‡§ï ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§ï‡•ã‡§°‡§ø‡§Ç‡§ó ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡•ç‡§™‡§∑‡•ç‡§ü ‡§î‡§∞ ‡§∏‡§Ç‡§ï‡•ç‡§∑‡§ø‡§™‡•ç‡§§ ‡§∞‡•Ç‡§™ ‡§∏‡•á ‡§ï‡•ã‡§° ‡§∏‡§Æ‡§ù‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§',        'Chinese (Simplified)': '‰Ω†ÊòØ‰∏Ä‰∏™ÊúâÁî®ÁöÑÁºñÁ®ãÂä©ÊâãÔºåÁî®ÁÆÄ‰Ωì‰∏≠ÊñáÊ∏ÖÊô∞ÁÆÄÊ¥ÅÂú∞Ëß£Èáä‰ª£Á†Å„ÄÇ',        'Japanese': '„ÅÇ„Å™„Åü„ÅØÊó•Êú¨Ë™û„Åß„Ç≥„Éº„Éâ„ÇíÊòéÁ¢∫„Åã„Å§Á∞°ÊΩî„Å´Ë™¨Êòé„Åô„ÇãÊúâÁî®„Å™„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇ',        'Korean': 'ÎãπÏã†ÏùÄ ÌïúÍµ≠Ïñ¥Î°ú ÏΩîÎìúÎ•º Î™ÖÌôïÌïòÍ≥† Í∞ÑÍ≤∞ÌïòÍ≤å ÏÑ§Î™ÖÌïòÎäî Ïú†Ïö©Ìïú ÏΩîÎî© ÎèÑÏö∞ÎØ∏ÏûÖÎãàÎã§.',        'Portuguese': 'Voc√™ √© um assistente de codifica√ß√£o √∫til que explica o c√≥digo de forma clara e concisa em portugu√™s.',        'Russian': '–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—ã–π —è—Å–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –∫–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',        'Italian': 'Sei un assistente di codifica utile che spiega il codice chiaramente e concisamente in italiano.',        'Dutch': 'Je bent een nuttige codeerassistent die code duidelijk en beknopt uitlegt in het Nederlands.'    };    return instructions[language] || instructions['English'];}async function getExplanation(code: string, apiKey: string, language: string = 'English'): Promise<string> {    const languageInstructions = getLanguageInstructions(language);        const prompt = `${languageInstructions}Explain the following code snippet in simple, clear language. Focus on what the code does, how it works, and any important concepts:\`\`\`${code}\`\`\`Please provide a concise but thorough explanation in ${language}.`;    try {        console.log('üåê CodIn: Making API request to OpenAI...');                // Import fetch dynamically to work around TypeScript issues        const fetchModule = await import('node-fetch');        const fetch = fetchModule.default;                const response = await fetch("https://api.openai.com/v1/chat/completions", {            method: "POST",            headers: {                "Authorization": `Bearer ${apiKey}`,                "Content-Type": "application/json",            },            body: JSON.stringify({                model: "gpt-3.5-turbo",                messages: [                    {                        role: "system",                        content: languageInstructions + " Focus on functionality, purpose, and key concepts."                    },                    {                        role: "user",                        content: prompt                    }                ],                max_tokens: 500,                temperature: 0.3,            }),        });        if (!response.ok) {            let errorMessage = 'Unknown error';            try {                const errorData: any = await response.json();                errorMessage = errorData.error?.message || `HTTP ${response.status}: ${response.statusText}`;            } catch {                errorMessage = `HTTP ${response.status}: ${response.statusText}`;            }            throw new Error(`OpenAI API error: ${errorMessage}`);        }        const data: any = await response.json();                if (!data.choices || data.choices.length === 0) {            throw new Error('No explanation generated by OpenAI');        }                console.log('‚úÖ CodIn: API response received successfully');        return data.choices[0].message.content.trim();    } catch (error: any) {        console.error('‚ùå CodIn: API error:', error);        throw new Error(`Failed to get explanation: ${error.message}`);    }}function getWebviewContent(explanation: string, code: string, language: string = 'English'): string {    const config = vscode.workspace.getConfiguration('codin');    const showLanguage = config.get<boolean>('showLanguageInPopup', true);    const languageDisplay = (SUPPORTED_LANGUAGES as any)[language] || language;    return `<!DOCTYPE html>    <html lang="en">    <head>        <meta charset="UTF-8">        <meta name="viewport" content="width=device-width, initial-scale=1.0">        <title>Code Explanation</title>        <style>            body {                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;                padding: 20px;                line-height: 1.6;                color: var(--vscode-foreground);                background-color: var(--vscode-editor-background);            }            .header {                border-bottom: 1px solid var(--vscode-panel-border);                padding-bottom: 15px;                margin-bottom: 20px;            }            .code-block {                background-color: var(--vscode-textBlockQuote-background);                border: 1px solid var(--vscode-panel-border);                border-radius: 6px;                padding: 12px;                margin: 10px 0;                font-family: 'Courier New', Consolas, 'Liberation Mono', Menlo, monospace;                font-size: 13px;                white-space: pre-wrap;                word-wrap: break-word;                overflow-x: auto;            }            .explanation {                background-color: var(--vscode-editor-background);                padding: 15px;                border-radius: 6px;                border-left: 4px solid var(--vscode-focusBorder);                margin-top: 15px;            }            h2 {                margin-top: 0;                color: var(--vscode-foreground);                font-size: 18px;            }            h3 {                color: var(--vscode-foreground);                font-size: 16px;                margin-bottom: 10px;            }        </style>    </head>    <body>        <div class="header">            <h2>ü§ñ Code Explanation</h2>            ${showLanguage ? `<div style="font-size: 14px; color: var(--vscode-descriptionForeground); margin-top: 5px;">                üåç Language: ${languageDisplay}            </div>` : ''}        </div>                <h3>üìù Selected Code:</h3>        <div class="code-block">${escapeHtml(code)}</div>                <h3>üí° Explanation:</h3>        <div class="explanation">            ${explanation.replace(/\n/g, '<br>')}        </div>                <div style="margin-top: 20px; padding: 10px; background-color: var(--vscode-textBlockQuote-background); border-radius: 4px; font-size: 12px; color: var(--vscode-descriptionForeground);">            üí° <strong>Quick Commands:</strong><br>            ‚Ä¢ Different language? <strong>Cmd+Shift+P</strong> ‚Üí <strong>"CodIn: Select Explanation Language"</strong><br>            ‚Ä¢ Manage API key? <strong>Cmd+Shift+P</strong> ‚Üí <strong>"CodIn: Set OpenAI API Key"</strong>        </div>    </body>    </html>`;}function getLoadingWebviewContent(): string {    return `<!DOCTYPE html>    <html lang="en">    <head>        <meta charset="UTF-8">        <meta name="viewport" content="width=device-width, initial-scale=1.0">        <title>Code Explanation</title>        <style>            body {                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;                padding: 20px;                color: var(--vscode-foreground);                background-color: var(--vscode-editor-background);                display: flex;                align-items: center;                justify-content: center;                min-height: 200px;                flex-direction: column;            }            .spinner {                border: 3px solid var(--vscode-panel-border);                border-top: 3px solid var(--vscode-focusBorder);                border-radius: 50%;                width: 30px;                height: 30px;                animation: spin 1s linear infinite;                margin-bottom: 15px;            }            @keyframes spin {                0% { transform: rotate(0deg); }                100% { transform: rotate(360deg); }            }        </style>    </head>    <body>        <div class="spinner"></div>        <p>Analyzing your code and generating explanation...</p>    </body>    </html>`;}function getErrorWebviewContent(errorMessage: string): string {    return `<!DOCTYPE html>    <html lang="en">    <head>        <meta charset="UTF-8">        <meta name="viewport" content="width=device-width, initial-scale=1.0">        <title>Code Explanation</title>        <style>            body {                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;                padding: 20px;                color: var(--vscode-foreground);                background-color: var(--vscode-editor-background);            }            .error {                background-color: var(--vscode-inputValidation-errorBackground);                border: 1px solid var(--vscode-inputValidation-errorBorder);                border-radius: 6px;                padding: 15px;                margin: 15px 0;            }        </style>    </head>    <body>        <h2>‚ùå Error</h2>        <div class="error">            <strong>Failed to generate explanation:</strong><br>            ${escapeHtml(errorMessage)}        </div>        <p>Please try again or check your API key configuration.</p>    </body>    </html>`;}function escapeHtml(unsafe: string): string {    return unsafe        .replace(/&/g, "&amp;")        .replace(/</g, "&lt;")        .replace(/>/g, "&gt;")        .replace(/"/g, "&quot;")        .replace(/'/g, "&#039;");}export function deactivate() {    console.log('üëã CodIn extension deactivated');}